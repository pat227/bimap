Implementation of a bi-map; see com.google.guava.bimap. Implemented
here for re-use using two maps under the hood. Also supports multi-bi-map,
in which a key is mapped to multiple values as in a multi-map and
the inverse view is supported as well under which any one of the values
will provide the key.

The parameterized class holds two mutable maps. Each method ensures us
that both maps are updated properly, alleviating the user or client code
from performing the correct operations on both maps when interacting
with either one of them.

The types of the maps are parameterized as follows: 
('a, 'b, 'c) Core.Map.t 
('b, 'a, 'd) Core.Map.t
This allows a forward map and a reverse map to be defined easily. An
example would be:
(Core.String.t, Core.Int.t, Core.String.Comparator.t) Core.Map.t
(Core.Int, Core.String.t, Core.Int.t.Comparator.t) Core.Map.t

However for a multi-map, the types would be:
('a, 'b list, 'c) Core.Map.t 
('b, 'a, 'd) Core.Map.t

a Bi-Multi-map is implemented in it's own class with it's own
type parameters. 